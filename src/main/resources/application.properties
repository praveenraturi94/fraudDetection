#spring.main.banner-mode=off
#
## create and drop tables and sequences, loads import.sql
#spring.jpa.hibernate.ddl-auto=create-drop
#
## Oracle settings
spring.datasource.url=jdbc:postgresql://localhost:5432/Employee
spring.datasource.username=postgres
spring.datasource.password=123
#spring.datasource.driverClassName=org.postgresql.Driver
### Hibernate Properties
## The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
#
## Hibernate ddl auto (create, create-drop, validate, update)
#spring.jpa.hibernate.ddl-auto = update
#
## HikariCP settings
## spring.datasource.hikari.*
#
##spring.datasource.hikari.connection-timeout=60000
##spring.datasource.hikari.maximum-pool-size=5
#
### logging
##logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n
##logging.level.org.hibernate.SQL=debug
###logging.level.org.hibernate.type.descriptor.sql=trace
##logging.level.=error


# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto = create

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

server.port = 8181